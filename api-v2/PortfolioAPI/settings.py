"""
Django settings for PortfolioAPI project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import logging
from pathlib import Path
import os

import huey
from dotenv import dotenv_values

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env_values = {
    # Root-level .env has lowest priority
    **dotenv_values(BASE_DIR / '.env'),

    # Secret .env overrides root .env
    **dotenv_values(BASE_DIR / '.secrets' / '.env'),

    # Environment variables set directly override everything.
    **os.environ,
}


def env(key: str, default=None):
    return env_values.get(key) or default


DEBUG = bool(env('DJANGO_DEBUG', default=False))
SECRET_KEY = env('DJANGO_SECRET_KEY')

ALLOWED_HOSTS = env('DJANGO_ALLOWED_HOSTS', default='localhost,127.0.0.1,[::1]').split(',')
print(f'ALLOWED_HOSTS = {ALLOWED_HOSTS}')

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'huey.contrib.djhuey',

    'ContactForm',
    'Emailer',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'PortfolioAPI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PortfolioAPI.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
} if DEBUG else {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('POSTGRES_DB'),
        'USER': env('POSTGRES_USER'),
        'HOST': env('POSTGRES_HOST'),
        'PORT': env('POSTGRES_PORT'),
        'PASSWORD': env('POSTGRES_PASSWORD'),
    }
}

HUEY = huey.RedisHuey('portfolio', host='redis')
if DEBUG:
    HUEY.immediate = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django-debug.log'
        }
    },
    'root': {
        'handlers': ['console', 'file'],
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

CONTACTFORM_NAME_MAX_LENGTH = 120
CONTACTFORM_ORGANIZATION_MAX_LENGTH = 180
CONTACTFORM_EMAIL_MAX_LENGTH = 254  # Matches Django's EmailValidator max length.
CONTACTFORM_EMAIL_REGULAR_EXPRESSION = r'^([a-zA-Z0-9_+-]+\.)*[a-zA-Z0-9_+-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z]+$'
CONTACTFORM_MESSAGE_MIN_LENGTH = 20
CONTACTFORM_MESSAGE_MAX_LENGTH = 1000

EMAILER_AUTH_SCOPES = ['https://mail.google.com/']
EMAILER_TOKEN_FILEPATH = BASE_DIR / '.secrets' / 'token.pickle'
EMAILER_CLIENT_SECRETS_FILEPATH = BASE_DIR / '.secrets' / 'client_secret.json'
EMAILER_CLIENT_EMAIL_ADDRESS = 'mikechurvis.site@gmail.com'
